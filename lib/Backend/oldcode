run command to use openGL/canavskit skia
flutter run -d chrome --release --web-renderer canvaskit

//   copyDoc(){
// // get the data from 'name@xxx.com'
// glossaryall.doc('C-17A-ER').get().then((doc) {
//     if (doc.exists) {
//         var data = doc.data();
//         // saves the data to 'name'
//         glossaryall.doc("C-17A-NON-ER").set(data);
//     }
// });
//   }
// }

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  Widget body;
  SelectMDSBody selectedMdsBody;
  Aircraft air;

  @override
  void initState() {
    body = Loading();
    //Center(child: Tex('Loading'));
    init();
    super.initState();
  }

  press() {
    body = Loading(); setState(() {
      
    });
    FirebaseFirestore.instance
    .collection('mds')
    .doc(selectedMdsBody.mdsSpin.selected)
    .get()
    .then((v) => setState(() {
          air = Aircraft(
            v.get('name'),
            v.get('fs0'),
            v.get('fs1'),
            v.get('mom0'),
            v.get('mom1'),
            v.get('weight0'),
            v.get('weight1'),
            v.get('simplemom'),
            v.get('lemac'),
            v.get('mac'),
            v.get('tanknames'),
            v.get('tankmoms'),
            v.get('tankweights'),
            v.get('titles'),
            v.get('bodys'),
            v.get('cargonames'),
            v.get('cargoweights'),
            v.get('cargomoms'),
            v.get('configs')
          );
          body = BottomNav(air);
    }));
  }

 

  init() {
    FirebaseFirestore.instance
        .collection('general')
        .doc('general')
        .get()
        .then((value) => setState(() {
              var gen = General(value.get('allmds'), value.get('welcometitle'),
                  value.get('welcomebody'));

              selectedMdsBody = SelectMDSBody(gen.csvAllMds, onPressed: press);

              body = ListView(children: <Widget>[
                Image(image: AssetImage('assets/0.png')),
                CardAllwaysOpen(
                    gen.welcometitle, RowCenterText(gen.welcomebody)),
                selectedMdsBody,
                // CCards('Now', TimeGrid())
              ]);
            }));
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        theme: ThemeData.dark(),
        home: Scaffold(
          body: body,
          backgroundColor: Colors.black,
        ));
  }
}






class CustomTextFieldNumSize extends StatefulWidget {
  final TextEditingController t;
  final int maxSize;
  final bool decimal;
  StringCallBack onChange;
  CustomTextFieldNumSize(this.t,this.maxSize,{this.decimal=true, this.onChange});
  @override
  _CustomTextFieldNumSizeState createState() => _CustomTextFieldNumSizeState();
}

class _CustomTextFieldNumSizeState extends State<CustomTextFieldNumSize> {

  change(String x){
    this.widget.onChange?.call(x);
  }
  @override
  Widget build(BuildContext context) {
    return Container(
        height: Const.pickerHeight*1.7,
        width: Const.pickerWidth,
        child: TextField(
            onChanged: change,
            maxLength: this.widget.maxSize,
            keyboardType: TextInputType.numberWithOptions(decimal: this.widget.decimal),
            textAlign: TextAlign.center,
            controller: this.widget.t,
            decoration: InputDec.wi));
  }
}

class CustomTextFieldTextMax extends StatefulWidget {
  TextEditingController t;
  StringCallBack onChange;
  CustomTextFieldTextMax(this.t,this.onChange);

  @override
  _CustomTextFieldTextMaxState createState() => _CustomTextFieldTextMaxState();
}

class _CustomTextFieldTextMaxState extends State<CustomTextFieldTextMax> {
  @override
  Widget build(BuildContext context) {
    return Container(
        height: Const.pickerHeight*1.7,
        child: TextField(
          onChanged: this.widget.onChange,
          maxLength: 45,
            keyboardType: TextInputType.name,
            textAlign: TextAlign.center,
            controller: this.widget.t,
            decoration: InputDec.wi));
  }
}

class CustomTextFieldText extends StatefulWidget {
  TextEditingController t;
  double width;
  int maxSize;
  CustomTextFieldText(this.t) {
    width = Const.pickerWidth;
  }
  CustomTextFieldText.d(this.t) {
    width = Const.pickerWidth * 2.0;
  }
  @override
  _CustomTextFieldTextState createState() => _CustomTextFieldTextState();
}

class _CustomTextFieldTextState extends State<CustomTextFieldText> {
  @override
  Widget build(BuildContext context) {
    return Container(
        height: Const.pickerHeight,
        width: this.widget.width,
        child: TextField(
            keyboardType: TextInputType.name,
            textAlign: TextAlign.center,
            controller: this.widget.t,
            decoration: InputDec.wi));
  }
}